/*
 *  프로젝트 : 공사 현장 스마트 안전 조끼, 안전모
 * 작성자 명 : 구준범
 * 수정할 것 : 어플리케이션과의 통신
 *  업데이트 : 12/09 - 회로 작성
 *            12/10 - 
 *            12/14 - 회로 완성, 통신 제외 소스코드 완성
 *            12/15 - 인터럽트 기능 작성
 *            12/16 - 학교 기말고사
 *            12/17 - 블루투스 시리얼 연결
 *            12/18 - 블루투스로 보낼 데이터 정리(parsing 하기 쉽게 정리)
 */

#include"DHT.h"
#include "BluetoothSerial.h" //블루투스 

//블루투스 check
#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

//핀 번호 할당
#define MQ_7B     26 //일산화탄소
#define MQ_4      25 //메탄가스
#define MQ_135    13 //대기질(이산화탄소,암모니아,벤젠,알코올)
#define DHT_11    17 //온습도 센서
#define Buzzer    14 //부저
#define Warn_led  21 //경고LED
#define TACT_SW   32 //알람 정지 tact switch
#define R_LED     18 //빨간 led
#define G_LED     19 //초록 led
#define B_LED     5  //파랑 led

//온습도 센서 DHT
DHT dht(DHT_11, DHT11);
//블루투스 시리얼
BluetoothSerial SerialBT;

//피에조 부저
#define SOUND_PWM_CHANNEL   0
#define SOUND_RESOLUTION    8 // 8 bit resolution
#define SOUND_ON            (1<<(SOUND_RESOLUTION-1)) // 50% duty cycle
#define SOUND_OFF           0                         // 0% duty cycle
int tones[8] = {523,587,659,698,783,880,987,1046}; //5옥타브 도 ~ 6옥타브 도

#define ALERT_TIMES 10  //위험 알람 울리는 반복 횟수

//민감도 설정값 선언
#define SENSOR_DETECT_EX_LOW 4000   // 매우 둔한
#define SENSOR_DETECT_LOW 3000      // 둔한
#define SENSOR_DETECT_MIDDLE 2000   // 일반
#define SENSOR_DETECT_HIGH 1500     // 예민한
#define SENSOR_DETECT_EX_HIGH 1000  // 매우 예민한

//기본 전역변수 선언(센서)
int MQ7 = 0;
int MQ4 = 0;
int MQ135 = 0;
int Temp = 0;
int Humi = 0;

//시스템 제어 변수 선언
boolean WANT_TO_ALERT = true; // 사용자가 알람을 원하는가?
int IS_DANGER = 0; // 현재 센서 값이 위험한 값인가?
int NOW_SENSITIVITY = SENSOR_DETECT_MIDDLE;// 센서 민감도 설정(default : SENSOR_DETECT_MIDDLE)
boolean toggle = false; // interrupt 함수 내 toggle 스위치 제어

/*==================================사용자 함수==================================*/
//esp32에서 피에조 사용하기 위한 pwm 제어
void tone(int pin, int frequency, int duration)
{
  ledcSetup(SOUND_PWM_CHANNEL, frequency, SOUND_RESOLUTION);  // Set up PWM channel
  ledcAttachPin(pin, SOUND_PWM_CHANNEL);                      // Attach channel to pin
  ledcWrite(SOUND_PWM_CHANNEL, SOUND_ON);
  delay(duration);
  ledcWrite(SOUND_PWM_CHANNEL, SOUND_OFF);
}

// 부저로 상황 알려주기
void alert_state(int condition)
{
  /*
   * 0: danger
   * 1: power on
   * 2: data received
   * 3: reserved
   */
  switch(condition)
  {
    case 0:                                   //danger
      for(int i = 0;i<ALERT_TIMES;i++)
      {
        tone(Buzzer,tones[7],100);
        digitalWrite(Warn_led,HIGH);
        tone(Buzzer,tones[4],100);
        digitalWrite(Warn_led,LOW);
      }
      break;
    
    case 1:                                   //ble connected
      for(int i = 0;i<7;i++)
      {
        tone(Buzzer,tones[i],100);
      }
      tone(Buzzer,tones[7],500);
      break;
    
    case 2:                                   //ble disconnected
      for(int i = 7;i>0;i--)
      {
        tone(Buzzer,tones[i],100);
      }
      tone(Buzzer,tones[0],500);
      break;
  }
}

//interrupt
void IRAM_ATTR ISR() {
  toggle = true;
/*
 * 인터럽트시 발생되는 이벤트(소리정지 Tact Switch)
 * toggle 방식으로 작동하며 스위치로 제어할 수 있음
 * tact 스위치의 falling시 chattering 을 방지하기 위해 interrupt 함수 안에서 제어하지 않음
 * toggle이 true 이면 loop내에서 delay를 걸어 chattering 방지
*/
}

//사용자 요구에 따른 센서 민감도 변경
void set_sensitivity(int input_sensitivity)
{
  /* -> 휴대폰에서 설정가능하도록 
   * #define SENSOR_DETECT_EX_LOW 4000   // 매우 둔한
   * #define SENSOR_DETECT_LOW 3000      // 둔한
   * #define SENSOR_DETECT_MIDDLE 2000   // 일반
   * #define SENSOR_DETECT_HIGH 1500     // 예민한
   * #define SENSOR_DETECT_EX_HIGH 1000  // 매우 예민한
   */
  switch(input_sensitivity)
  {
    case 49:
    NOW_SENSITIVITY = SENSOR_DETECT_EX_LOW; // 매우 둔한
    Serial.print("sensitivity set extremely low");
    break;
    
    case 50:
    NOW_SENSITIVITY = SENSOR_DETECT_LOW;    // 둔한
    Serial.print("sensitivity set low");
    break;
    
    case 51:
    NOW_SENSITIVITY = SENSOR_DETECT_MIDDLE; // 보통
    Serial.print("sensitivity set middle");
    break;
    
    case 52:
    NOW_SENSITIVITY = SENSOR_DETECT_HIGH;   // 예민한
    Serial.print("sensitivity set high");
    break;
    
    case 53:
    NOW_SENSITIVITY = SENSOR_DETECT_EX_HIGH;// 매우 예민한
    Serial.print("sensitivity set extremely high");
    break;
  }
}
void print_BT_(int x, int y, int z)
{
  if(x)
  {
    SerialBT.print("위험");
  }
  else
  {
    SerialBT.print("정상");
  }
  SerialBT.print(":");
  if(y)
  {
    SerialBT.print("위험");
  }
  else
  {
    SerialBT.print("정상");
  }
  SerialBT.print(":");
  if(z)
  {
    SerialBT.print("위험");
  }
  else
  {
    SerialBT.print("정상");
  }
  SerialBT.print(":");
}

void print_BT(int a, int b, int c, int d, int e, int f)
{
  SerialBT.print("v");
  SerialBT.print(":");
  SerialBT.print(a);
  SerialBT.print(":");
  SerialBT.print(b);
  SerialBT.print(":");
  SerialBT.print(c);
  SerialBT.print(":");
  SerialBT.print(d);
  SerialBT.print(":");
  SerialBT.print(e);
  SerialBT.print(":");

  switch(f)
  {
    case 0:
     print_BT_(0,0,0);
    break;
    case 1: 
     print_BT_(1,0,0);
    break;
    case 2: 
     print_BT_(0,1,0);
    break;
    case 3: 
     print_BT_(0,0,1);
    break;
    case 4: 
     print_BT_(1,1,0);
    break;
    case 5: 
     print_BT_(0,1,1);
    break;
    case 6: 
     print_BT_(1,0,1);
    break;
    case 7: 
     print_BT_(1,1,1);
    break;
  }
}

int calc_value(int MQ7_v, int MQ4_v, int MQ135_v)
{
  /* 
   * 반환값 0: 정상
   * 반환값 1: MQ7
   * 반환값 2: MQ4
   * 반환값 3: MQ135
   * 반환값 4: MQ7 & MQ4
   * 반환값 5: MQ7 & MQ135
   * 반환값 6: MQ4 & MQ135
   * 반환값 7: MQ7 & MQ4 & MQ135
   */
  if(MQ7_v>NOW_SENSITIVITY)
  {
    if(MQ4_v>NOW_SENSITIVITY)
    {
      if(MQ135_v>NOW_SENSITIVITY)
      {
        return 7;
      }
      else
      {
        return 4;
      }
    }
    else if(MQ135_v>NOW_SENSITIVITY)
    {
      return 5;
    }
    else
    {
      return 1;
    }
  }
  else if(MQ4_v>NOW_SENSITIVITY)
  {
    if(MQ135_v>NOW_SENSITIVITY)
    {
      return 6;
    }
    else
    {
      return 2;
    }
  }
  else if(MQ135_v>NOW_SENSITIVITY)
  {
    return 3;
  }
  else
  {
    return 0;
  }
}

//tact 스위치의 toggle 구현 함수
void change_led()
{
  delay(100);
  toggle = false;
  if(WANT_TO_ALERT ==true)
  {
    WANT_TO_ALERT = false;
    digitalWrite(G_LED,LOW);
    digitalWrite(R_LED,HIGH);
  }
  else
  {
    WANT_TO_ALERT = true;
    digitalWrite(R_LED,LOW);
    digitalWrite(G_LED,HIGH);
  }
}
/*==================================setup 함수==================================*/
void setup() {
//핀 모드 설정
pinMode(MQ_7B,INPUT);
pinMode(MQ_4,INPUT);
pinMode(MQ_135,INPUT);
pinMode(Buzzer,OUTPUT);
pinMode(Warn_led,OUTPUT);
pinMode(TACT_SW,INPUT);
pinMode(R_LED,OUTPUT);
pinMode(G_LED,OUTPUT);
pinMode(B_LED,OUTPUT);

//interrupt 핀 설정
attachInterrupt(TACT_SW,ISR,FALLING);

//시리얼통신 시작
Serial.begin(9600);
//온습도 센서 on
dht.begin();
Serial.println("Start dht sensor");
//블루투스 통신 시작
SerialBT.begin("Smart_Vest");
//power on alert
alert_state(1);
Serial.println("Start BLE Client safety vest");
//led init
digitalWrite(G_LED,HIGH);
}

/*==================================loop 함수==================================*/
void loop() {
  delay(300);
  //센서 값 획득
  MQ7 = analogRead(MQ_7B);
  MQ4 = analogRead(MQ_4);
  MQ135 = analogRead(MQ_135);
  Temp = dht.readTemperature();
  Humi = dht.readHumidity();

  //데이터 분석
  IS_DANGER = calc_value(MQ7,MQ4,MQ135); //현재 값을 분석해 값을 저장 & SerialBT에 출력.
  
  //현재 값이 위험상태이고, 사용자가 알람을 원하면 알람을 울린다.
  if(IS_DANGER && WANT_TO_ALERT)
  {
    alert_state(0);
  }
  
  //센서 값 시리얼 출력
  Serial.println("========================");
  Serial.print("MQ7(CO)     :");
  Serial.println(MQ7);
  Serial.print("MQ4(CH4)    :");
  Serial.println(MQ4);
  Serial.print("MQ135(CO2)  :");
  Serial.println(MQ135);
  Serial.print("Temperature :");
  Serial.println(Temp);
  Serial.print("Humidity    :");
  Serial.println(Humi);
  Serial.println("========================");
  
  //블루투스를 이용해 휴대폰으로 데이터 전송 
  print_BT(Temp, Humi, MQ7, MQ4, MQ135, IS_DANGER);
  
  //data를 받아오면 민감도 설정
  if(SerialBT.available())
  {
    //데이터가 도착했다는 것을 소리로 알려줌.
    alert_state(2);
    //받아온 데이터를 넘겨 민감도 변경
    set_sensitivity(SerialBT.read());
  }
  
  //interrupt에서 toggle이 true로 바뀌면, toggle 함수 실행
  if(toggle == true)
  {
    change_led();
  }
  
}
